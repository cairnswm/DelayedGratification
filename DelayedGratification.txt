

On a recent project I was working on I encountered a problem with one of the APIs I was accessing. The API was responding very slowly due to the size of the messages returned. This caused the web site I was creating to seem delayed in its response. As the web site was expecting people to be accessing it on a regular basis it made more sense to show older data instead of forcing the user to wait.

A simple solution would be to use asynchronous ajax calls but as there was a lot of data to be cached I decided to try using web workers and LocalDB for caching.

Web workers are effectively Browser background threads that are created to do certain functions such as calculations, or in this case fetch and cache data. The main browser thread and the web worker can communicate with each other through messages.

For this code I used XAMPP running on my local machine.

Lets start by creating a small web service that responds very slowly. To represent the delay I've added a sleep and then just return a nicely formatted date.

<code>
<?php

// Lets delay the response......
sleep(5);
// Send back the date
echo date("F j, Y, g:i:s a"); // March 10, 2001, 5:16:05 pm;

?>
</code>

We want to display the service response on a web page so we create a web page with a div where we will display the service result. On initial load we display a "Loading..." message that will be replaced when the server (finally) responds. I've given the div an id of LastAccess

<code>
<!DOCTYPE html>
<html>
    <head>
        <title>Delayed Gratification</title>
        
    </head>
    <body>
        <h1>Delayed Gratification</h1>
        <p>Displays a slowly responding API updting the page - non blocking</p>
        <div id="LastAccess">Loading....</div>
    </body>
    <script type="text/javascript" src="delayedGratification1.js"></script>
</html>
</code>

In the HTML we load a javascript file that will contain the code for fetching the service response and displaying it in the page. As the javascript is loaded at the end of the script we can just declare a function to start the process

<code>
// Execute when HTML has loaded
(function() {
    // your page initialization code here
    // the DOM will be available here

    // Load the WebWorker
   LoadDate();
 })();

 function LoadDate()
 {
 }
 
  function DisplayDate(DisplayText)
 {
 }
</code>

First I create the function to populate the field on the web page:
<code>
  function DisplayDate(DisplayText)
 {
    console.log(DisplayText);
    thediv = document.getElementById("LastAccess");
    thediv.innerText = DisplayText;
 }
</code>

this can be tested by placing the line 
DisplayDate("Hello World") in the LoadDate() method.

Next we create just a standard ajax call to fetch the data from the php file
<code>
 // Version1: Just read date and display when recieved
 function LoadDate()
 {
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function()
    {
        if(xmlHttp.readyState == 4 && xmlHttp.status == 200)
        {
            DisplayDate(xmlHttp.responseText);
        }
    }
    xmlHttp.open("get", "delayedGratification.php"); 
    xmlHttp.send();
 }
</code>

Note, check the php file name matches the file name you need

If we open the web page now we should see the current date being displayed after a significant delay (hopefully long enough to be irritating). This method is effectively an asynchronous call to the service and will update the interface when it finally returns. 

So lets change this to make use of a Web Worker, we move the service call to the web worker and set up a messaging system between the browser script and the web worker.

The web worker code is as follows
<code>
// Web Worker file, when this file is loaded as a web worker it does nothign until it recieves a message from the browser
onmessage = function(e) {
    // Log the start of the process
    console.log('Worker: Message received from main script'); 
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.onreadystatechange = function()
    {
        // Manage Success
        if(xmlHttp.readyState == 4 && xmlHttp.status == 200)
        {
            postMessage(xmlHttp.responseText);
        }
        // Manager Failre
        if(xmlHttp.readyState == 4 && xmlHttp.status != 200)
        {
            console.log("Error: ".xmlHttp.responseText)
            postMessage("Failed to get new date");
        }
    }
    // Call the service
    xmlHttp.open("get", "delayedGratification.php"); 
    xmlHttp.send();
 }
</code>

To create and call the web worker we need to change the LoadDate function....
<code>
 // Version2: Use a web worker and display when recieved
 function LoadDate()
 {
     // Move Ajax call into the WebWorker
    if (window.Worker) {
        const myWorker = new Worker("delayedGratificationWebWorker.js");

        // Send a message to the web worker to get the date
        myWorker.postMessage("Request");
        console.log('Message posted to worker');

        // When the Web Worker responds display the data
        myWorker.onmessage = function(e) {
            DisplayDate(e.data);
            console.log('Message received from worker');
        }
    } else {

        console.log('Your browser doesn\'t support web workers.')
    }
 }
</code>

It would be a better idea to declare the Worker as a global variable so that it can be reused elsewhere in the code (for example refresh the date on a button click). The web Worker should also be created in the on load function instead of in this method.

This code creates both the Web Worker and the messaging system. No other changes were required in the code. If you refresh the page the behavious will be exaclt the same. All we have effectively done is refactor the ajax code into a web worker. In a more complex example this code could be used to load remote data on user input. For a slow API that needs to be called regularly a timeout method could be used to continually feedback the result to the main page.

For my application using the slow responding api I want to make it look to the user as if his data was there immediatly. For this I store the data returned in LocalDB on the client, so the next time the user accesses the page we show him the last data we had while in the background the web worker fetches the up to date information.

First we modify the DisplayDate method to display the date from LocalDB instead of as a parameter
<code>
 function DisplayDate()
 {
    // fetch data from LocalDB
    DisplayText  = localStorage.getItem("LastAccess");
    console.log(DisplayText);
    thediv = document.getElementById("LastAccess");
    thediv.innerText = DisplayText;
 }
 </code>
 
 Then before fetching the data in the background we call the display date function
 <code>
 // Execute when HTML has loaded
(function() {
    // your page initialization code here
    // the DOM will be available here
    // Display the date using stored values
    DisplayDate();
    // Load the WebWorker
    LoadDate();
 })();
 </code>
 
 A small change to the method calling the web worker is needed to store the latest value.

<code>
 // Version3: Use webworker to fetch and save date, but display last date while waiting
 // On first run only shows "Loading..."
 function LoadDate()
 {
    if (window.Worker) {
        const myWorker = new Worker("delayedGratificationWebWorker.js");

        // Send a message to the web worker to get the date
        myWorker.postMessage("Request");
        console.log('Message posted to worker');

        // When the Web Worker responds display the data
        myWorker.onmessage = function(e) {
            // Save the date locally so next time the page opens it can be displayed as historical data 
            // So does not appear to be hanging while fetching data
            localStorage.setItem("LastAccess", e.data);
            console.log('Message received from worker');
            DisplayDate();
        }
    } else {

        console.log('Your browser doesn\'t support web workers.')
    }
 }
</code>

If you run the application now it will still show loading, before updating the date. This is identical behavior to the previous version. However if you refresh the page again the initial date will display the old date while a new date is being fetched. While with the date value it makes little difference consider a page with complex figures that are immediately displayed and later updated.

Within the project I am working on, the first load will result in other apis needing to be called and loaded into memory. While this is happening the screen will display the old data, and updating section by section as the data becomes available. By passing the data retrieval tasks to the web worker we make the user interface separate form the APIs.

Within the application each element of the interface requireing API data will have a data value indicating it requires api data, and another data attribute indicating what kind of data. When the web worker responds with a new data set all the elements with correct data attributes will be updated.




